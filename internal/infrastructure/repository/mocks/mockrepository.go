// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/infrastructure/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entities "github.com/Imm0bilize/gunshot-api-service/internal/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockClientRepository is a mock of ClientRepository interface.
type MockClientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockClientRepositoryMockRecorder
}

// MockClientRepositoryMockRecorder is the mock recorder for MockClientRepository.
type MockClientRepositoryMockRecorder struct {
	mock *MockClientRepository
}

// NewMockClientRepository creates a new mock instance.
func NewMockClientRepository(ctrl *gomock.Controller) *MockClientRepository {
	mock := &MockClientRepository{ctrl: ctrl}
	mock.recorder = &MockClientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientRepository) EXPECT() *MockClientRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClientRepository) Create(ctx context.Context, client *entities.Client) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, client)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockClientRepositoryMockRecorder) Create(ctx, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClientRepository)(nil).Create), ctx, client)
}

// Delete mocks base method.
func (m *MockClientRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClientRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClientRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockClientRepository) Get(ctx context.Context, id string) (entities.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(entities.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClientRepository)(nil).Get), ctx, id)
}

// Update mocks base method.
func (m *MockClientRepository) Update(ctx context.Context, id string, client *entities.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, client)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockClientRepositoryMockRecorder) Update(ctx, id, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClientRepository)(nil).Update), ctx, id, client)
}
